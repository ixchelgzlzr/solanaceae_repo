#--------------------------------#
# THE CONTINUOUS EVOLUTION MODEL #
#--------------------------------#

# num of cont traits
num_cont_traits <- contData.nchar()

#--------
# NOTE: The rate for a given character on a given branch depends on branchRates and siteRates.
# If both have a scale, then it is a problem because then you can scale one up and 
# the other down and not change the likelihood (they are unidentifiable)
# therefore only one can have an absolute rate
# So I am going to make siteRates to have a mean of 1
#--------

# I am using a  Brownian motion model that
# usually has a single parameter sigma square, but in this case I want each
# character to have its own rates

# get a vector of rates
prop_rates ~ dnDirichlet(rep(1, num_cont_traits))
# move on prop_rates
moves.append( mvBetaSimplex(prop_rates, weight = 3))

# get the relative rates with mean 1
rel_rates := prop_rates * num_cont_traits

# draw the clock mean such as its log distribution is uniform
cont_clock_rate_mean ~ dnLoguniform(1e-10, 1e1)
#cont_clock_rate_mean <- 1
moves.append( mvScale(cont_clock_rate_mean, weight = 15) )

#adding a move dec 11
moves.append( mvSlice(cont_clock_rate_mean, weight = 5) )

cont_clock_rate_mean.setValue(0.6)

# draw the standard deviation from an exponential
#cont_clock_rate_sd ~ dnExponential(abs(1 / H))
#moves.append( mvScale(cont_clock_rate_sd, weight = 10) )#

# the branch rates
for(i in 1:nbranch) {
  cont_branch_rates[i] := cont_clock_rate_mean
}


# specify that we are going calculate BM likelihood using the REML PIC algorithm (see Felsenstein 1973) 
cont_traits ~ dnPhyloBrownianREML(timetree, branchRates = cont_branch_rates, siteRates = rel_rates, nSites = num_cont_traits)
cont_traits.clamp(contData) #match traits to tips

# add branch rates to joint scale move on tree
#moves[tree_scale_move_index].addVariable(cont_branch_rates, up=true)
moves[tree_scale_move_index].addVariable(cont_clock_rate_mean, up=true)

# these moves are for rates and times identifiability of relaxd clocks, so not to use for strcit clock
#moves[rate_age_move_index].addRates(cont_branch_rates)
#moves[rate_age_subtree_index].addRates(cont_branch_rates)


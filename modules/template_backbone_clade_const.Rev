
# moves container
moves = VectorMoves()

# monitors vector
monitors = VectorMonitors()

# convenient constants
H = ln(10) / (qnorm(0.975) - qnorm(0.025))


################
# loading data #
################

# read the sequence data
  # get the files names
markers = listFiles( data_dir + "alignments" )

  # how many alignments
naln = markers.size()

    #read the alignments
for(i in 1:naln) {
    moledata[i] = readDiscreteCharacterData(markers[i]) 
}

# read the morphological data
morphdata = readDiscreteCharacterData(data_dir +  "morphology.nexus")

# read the continuous data
continuous = data_dir + "continuous.nexus"
contData   = readContinuousCharacterData(continuous)

# read the taxon data
taxa = readTaxonData(data_dir + "Ages.txt", delimiter=TAB)
ntax = taxa.size()
nbranch = 2 * ntax - 2

# count the number of fossils
num_fossils = 0
for(i in 1:taxa.size()) {
  if (taxa[i].getMinAge() != 0) {
    num_fossils = num_fossils + 1
  }
}

# add missing taxa to the sequence data
for(i in 1:naln) {
  x = moledata[i]
  x.addMissingTaxa(taxa)
  moledata[i] = x
}

# add missing taxa to the morphological data
morphdata.addMissingTaxa(taxa)

# partition morphological data by number of states
n_max_states = 10  

  # start a counter
idx = 0

  # for each number of character states
for (i in 2:n_max_states) {

    # make a tempory character alignment
    morph_tmp <- morphdata

    # retain characters with i states
    morph_tmp.setNumStatesPartition(i)

    # if there are more than zero characters with this many states...
    # store the data partition
    if ( morph_tmp.nchar() > 0 ) {
        morph_partitions[++idx] = morph_tmp
        nc[idx] = i
    }
}

# compute the number of morphological partitions
num_morph_parts = morph_partitions.size()

# read in the timescale
timescale = readDataDelimitedFile(data_dir + "epoch_timescale.csv", header = true, delimiter=",")
num_bins  = timescale.size()
for(i in 1:num_bins) {
    breakpoints[i] <- timescale[i][2]
}

# read the clade constraints
source(data_dir + constraints + ".Rev")

#############################
# specifying the tree model #
#############################

# first we specify some dataset-specific parameters
extant_taxa = 62    # total number of extant taxa in the tree
total_taxa  = 2800    # total number of extant taxa in the group
rho <- extant_taxa/total_taxa   # sampling fraction

# Lets specify an origin time rather than a root
# I will use the age for Solanales Stem in Magallon 
# because that's the age where the lineage that gave origing to Solanaceae + Convulvulaceae
# 85.91, 95% HPD -100.34
# using an absurdly old max just to test
origin_min  = 55
origin_max  = 100.34


# draw the origin time
origin_time ~ dnUniform(origin_min, origin_max)
moves.append( mvSlide(origin_time, delta = 10, weight = 10) )

# specify the diversification model
source("modules/diversification_models/" + diversification_model + ".Rev")

# specify the fossilization model
source("modules/fossilization_models/" + fossilization_model + ".Rev")


# adding a topology constrain/backbone
backbone=readTrees("data/R_backbone_from_sampled_3_tips.tree")


# make the FBD tree DISTRIBUTION
timetree_dist = dnFBDP(originAge = origin_time,
                  lambda    = lambda,
                  mu        = mu,
                  psi       = psi,
                  timeline  = breakpoints,
                  condition = "survival",
                  rho       = Probability(extant_taxa / total_taxa),
                  taxa      = taxa)

#drawing the timetree from a contrained topology distribution
timetree ~ dnConstrainedTopology(timetree_dist, constraints=constraints, backbone = backbone)

#writeNexus(timetree, output_dir + "first_tree.tree")

# T <- readTrees("data/R_startingtree_longchain.tree", treetype = "clock")

# # use a starting tree
# timetree.setValue(T[1])


# MCMC proposals on the tree
moves.append( mvSubtreeScale(timetree,               weight = ntax/5.0) )
moves.append( mvFNPR(timetree,                       weight = ntax                             ) )
moves.append( mvNarrow(timetree,                     weight = 5 * ntax                         ) )
moves.append( mvNodeTimeSlideUniform(timetree,       weight = 5 * ntax                         ) )
moves.append( mvSubtreeScale(timetree,               weight = 5 * ntax                         ) )
moves.append( mvRootTimeSlideUniform(timetree,       weight = 10 * ntax,   origin = origin_time) ) #only when using origin

# MCMC proposals on whether fossils are sampled ancestors
moves.append( mvCollapseExpandFossilBranch(timetree, weight = num_fossils, origin = origin_time) )
num_sampled_ancestors := timetree.numSampledAncestors()

# MCMC proposals on the fossil ages
fossils = timetree.getFossils()
for(i in 1:fossils.size()) {

  # get the fossil age
  t[i] := tmrca(timetree, clade(fossils[i]))

  # specify the age contraint
  a = fossils[i].getMinAge()
  b = fossils[i].getMaxAge()

  F[i] ~ dnUniform(t[i] - b, t[i] - a)
  F[i].clamp( 0 )

  # specify a proposal on the fossil age
  moves.append( mvFossilTimeSlideUniform(timetree, origin_time, fossils[i], weight = 1.0) )

}

# keep track of the extant tree
extant_tree := fnPruneTree(timetree, fossils)

# keep track of the tree length
TL        := timetree.treeLength()
TL_extant := extant_tree.treeLength()


# make a joint proposal for the tree (and later the branch rates)

# first add the move
moves.append( mvUpDownScale(weight=50, tune = false) )

# then  get the index
tree_scale_move_index = moves.size()

# add some variables
moves[tree_scale_move_index].addVariable(timetree,    up=false)
moves[tree_scale_move_index].addVariable(origin_time, up=false)
#moves[tree_scale_move_index].addVariable(lambda_global, up=true)
#moves[tree_scale_move_index].addVariable(mu_global,     up=true)

########################################
# specifying the molecular clock model #
########################################

source("modules/mol_clock_models/" + mole_clock_model + ".Rev")

#####################################
# specifying the substitution model #
#####################################

source("modules/mol_evol_models/" + substn_model + ".Rev")

# make the CTMC for molecular data
for(i in 1:naln) {
  seq[i] ~ dnPhyloCTMC(timetree, mole_Q[i], branchRates = mole_branch_rates, siteRates = mole_site_rates[i] * mole_relative_rates[i])
  seq[i].clamp( moledata[i] )
}

############################################
# specifying the morphological clock model #
############################################

source("modules/morph_clock_models/" + morph_clock_model + ".Rev")

#################################################
# specifying the morphological transition model #
#################################################

source("modules/morph_evol_models/" + morph_model + ".Rev")

# Make the CTMC for morphological data

for (i in 1:morph_Q.size()){
  morph[i] ~ dnPhyloCTMC(timetree, morph_Q[i], branchRates = morph_branch_rates, siteRates = morph_site_rates, coding  = "variable", type = "Standard")
  morph[i].clamp ( morph_partitions[i] )
}


# # # TURNING ALL THESE ON TO SEE IF IT RUNS (turning off oct 15)
# I think this causes the  Error:	Cannot draw random variable from beta distribution for a = nan and b = nan
#moves.append( mvRateAgeProposal(timetree, weight=100, alpha=1, tune=false) )
#rate_age_move_index = moves.size()
#moves[rate_age_move_index].addRates(mole_branch_rates)


# moves.append( mvRateAgeSubtreeProposal(timetree, weight=80, alpha=1, tune=false) )
# rate_age_subtree_index = moves.size()
# moves[rate_age_subtree_index].addRates(mole_branch_rates)


####################################################
# specifying the continuous traits model #
####################################################

source("modules/cont_models/" + cont_model + ".Rev")



####################
# running analysis #
####################

source("modules/analysis/" + analysis + ".Rev")


#q()
